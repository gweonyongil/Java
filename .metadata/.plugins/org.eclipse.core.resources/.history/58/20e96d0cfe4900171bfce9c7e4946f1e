package controller.textviewer;

import java.util.ArrayList;

import javax.swing.text.BadLocationException;

import model.compare.ComparedLine;
import model.compare.Line;
import model.merge.MergeLine;
import view.LineColorOffset;
import view.Text;

public class TextViewerMergeController {
	private Text lefttext;
	private Text righttext;
	
	private String contents = "";
	private int sign = 1;
	private int diff = 0;
	private int length_diff = 0;
	private ArrayList<LineColorOffset> left_linecolorlist;
	private ArrayList<LineColorOffset> right_linecolorlist;
	private ArrayList<Line> compared_left_lines;
	private ArrayList<Line> compared_right_lines;
	private MergeLine mrgline;
	
	public TextViewerMergeController()
	{
		
	}
	void shiftRight(int linesetcolorindex, String right_contents) throws BadLocationException
	{
		String contents = "";
		int sign = 1;
		int diff = 0;
		int length_diff = 0;
		
		int shift_start_line = left_linecolorlist.get(linesetcolorindex).getStartLine();
		int shift_end_line = left_linecolorlist.get(linesetcolorindex).getEndLine();
		int right_color_start = right_linecolorlist.get(linesetcolorindex).getColorStart();
		int right_color_end = right_linecolorlist.get(linesetcolorindex).getColorEnd();
		int left_color_start = left_linecolorlist.get(linesetcolorindex).getColorStart();
		int left_color_end = left_linecolorlist.get(linesetcolorindex).getColorEnd();
		
		System.out.println(shift_start_line + " : " + shift_end_line);
		mrgline.moveLineTo(compared_right_lines , compared_left_lines , shift_start_line, shift_end_line);
		for(int i = 0; i < compared_right_lines.size(); i++)
		{
			contents += compared_right_lines.get(i).line + "\n";
		}
		//Update Right LineColor list
		diff = (right_color_end - right_color_start) - (left_color_end - left_color_start);
		if(diff  < 0)
			diff *= -1;
		else
			diff *= -1;
		length_diff = left_color_end - left_color_start;
		right_linecolorlist.get(linesetcolorindex).setColorStart(right_color_start);
		right_linecolorlist.get(linesetcolorindex).setColorEnd(right_color_start + sign * (length_diff));
		
		right_linecolorlist.get(linesetcolorindex).setTag(ComparedLine.Tag.equal);
		left_linecolorlist.get(linesetcolorindex).setTag(ComparedLine.Tag.equal);
		
		for(int i = linesetcolorindex + 1; i < right_linecolorlist.size(); i++)
		{
			right_linecolorlist.get(i).setColorStart(right_linecolorlist.get(i).getColorStart() + (diff));
			right_linecolorlist.get(i).setColorEnd(right_linecolorlist.get(i).getColorEnd() + (diff));
			System.out.println(right_linecolorlist.get(i).getColorStart() + " @:@ " + right_linecolorlist.get(i).getColorEnd());
		}
		righttext.setLineColorOffsetArray(right_linecolorlist);
		lefttext.setLineColorOffsetArray(left_linecolorlist);
		
		righttext.setText(contents);
		right_contents = new String(contents);
		
		righttext.selectLineSet(linesetcolorindex);
		lefttext.selectLineSet(linesetcolorindex);
		//Remove Operation
		right_linecolorlist.remove(linesetcolorindex);
		left_linecolorlist.remove(linesetcolorindex);
		righttext.setLineColorOffsetArray(right_linecolorlist);
		lefttext.setLineColorOffsetArray(left_linecolorlist);
		if(linesetcolorindex >= 0){
			linesetcolorindex--;
		}
	}
}